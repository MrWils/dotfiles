* LICENSE NOTICE AND CONFIGURATION COMMENTARY
#+BEGIN_SRC emacs-lisp
;; Copyright (C) 2018-2020 Robin Wils

;; Author: Robin Wils
;; Maintainer: Robin Wils
;; Created: 14 Jul, 2018
;; Version: 0.1.2

;; This config is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.

;; This config is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this config. If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;; Quick Start / installation:
;; 1. Place emacs-init.org into your .emacs.d directory.
;; 2. Replace your .emacs file with my .emacs one.
;; (It is recommended to backup your .emacs file before you do this)

;;; Code:
#+END_SRC
* INITIALIZE PACKAGES
#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC
* REPOSITORIES
The official repository misses a lot of packages. MELPA is a more popular
repository which contains more packages.
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
#+END_SRC
* FASTER STARTUP
Emacs should load faster if with this configured. This is only recommended if
your machine has enough RAM. It should work on the most modern machines.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 64000000)
(add-hook 'after-init-hook
          #'(lambda () (setq gc-cons-threshold 800000)))
#+END_SRC
* USE-PACKAGE
Install use-package if it is not installed.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

Require use-package.
#+BEGIN_SRC emacs-lisp
(eval-when-compile (require 'use-package))
#+END_SRC
* VARIABLES
#+BEGIN_SRC emacs-lisp
(setq
 ;; Personal information
 user-full-name "Robin Wils"
 user-mail-address "mrwils@tutanota.com"

 ;; No startup message.
 inhibit-startup-message t

 ;; No startup-screen
 inhibit-startup-screen t

 ;; Empty scratch buffer
 initial-scratch-message nil

 ;; End sentences with one space
 sentence-end-double-space nil

 ;; No backups
 make-backup-files nil

 ;; Disable dialogs
 use-dialog-box nil

 ;; Disable emacs beep
 visible-bell 1

 ;; Indentation variables
 custom-tab-width 2
 big-custom-tab-width 4)


(setq-default
 ;; Mark column 80 in the header (Clean code matters)
 header-line-format (list " " (make-string 79 ?-) "|")

 ;; Force the messages to 0
 message-log-max nil

 ;; Set the tab-width
 tab-width custom-tab-width

 ;; Don't use tabs
 ;; use spaces instead
 ;; indent-tabs-mode nil
 )
#+END_SRC
* HIDE GUI ELEMENTS
#+BEGIN_SRC emacs-lisp
;; No cursor blink
(blink-cursor-mode -1)

;; Hide the toolbar
(tool-bar-mode -1)

;; Hide the scrollbar
(toggle-scroll-bar -1)

;; Hide the menu bar (recommended)
;; (menu-bar-mode -1)
#+END_SRC
* BETTER DEFAULTS
** Better dired (change default config)
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook
          (lambda ()
            (dired-hide-details-mode)
            (dired-sort-toggle-or-edit)))
;; Don't ask for recursive copies, just do it.
(setq dired-recursive-copies 'always)
#+END_SRC
** Better keys - Xah Fly Keys
I use Xah Fly Keys Dvorak. QWERTY and other layout support for this mode
exists.
#+BEGIN_SRC emacs-lisp
(use-package xah-fly-keys
  :ensure t
  :config
  (xah-fly-keys-set-layout "dvorak")
  (xah-fly-keys 1))
#+END_SRC
** Better modes
Xah Lee has some great modes which are better as the defaults.
#+BEGIN_SRC emacs-lisp
(use-package xah-css-mode
  :ensure t
  :config
  :hook
  (css-mode . xah-css-mode)
  (css-mode . untabify-whole-buffer))
#+END_SRC
** Use async processes when it is possible
#+BEGIN_SRC emacs-lisp
(use-package async :ensure t :init (dired-async-mode 1))
#+END_SRC
* OWN HOOK FUNCTIONS
** Untabify whole buffer
Removes all the tabs in a buffer.
#+BEGIN_SRC emacs-lisp
(defun untabify-whole-buffer()
  "Untabifies a whole buffer."
  (interactive)
  (untabify (point-min) (point-max)))
#+END_SRC
* LOAD OTHER SECRET FILES
This file contains some (setq) variables. There is probably a better
and more secure way to do this.
#+BEGIN_SRC emacs-lisp
(defun load-if-exists (file)
  "load the elisp file only if it exists and if it is readable"
  (if (file-readable-p file)
      (load-file file)))
;; For example: (load-if-exists "~/.secrets.el")
#+END_SRC
* SETUP SOME DEFAULTS
** Kill the *Messages* buffer on startup
#+BEGIN_SRC emacs-lisp
(if (get-buffer "*Messages*")
    (kill-buffer "*Messages*"))
#+END_SRC
** Disable *Completions* buffer
#+BEGIN_SRC emacs-lisp
(add-hook 'minibuffer-exit-hook
          '(lambda ()
             (let ((buffer "*Completions*"))
               (and (get-buffer buffer)
                    (kill-buffer buffer)))))
#+END_SRC
** Unset the default suspend-frame shortcut
The default C-z command minimizes GNU emacs. I don't like that.
#+BEGIN_SRC emacs-lisp
(global-unset-key "\C-z")
#+END_SRC
** Replace typing "yes" or "no" with typing "y" or "n"
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Make it possible to hide minor modes
#+BEGIN_SRC emacs-lisp
(use-package diminish :ensure t)
#+END_SRC
* THEME
I like the darktooth theme and the Hack font.
The Hack font needs to be installed on your system though.

I want to automate the font installation in the future.
#+BEGIN_SRC emacs-lisp
(use-package darktooth-theme
  :ensure t
  :config (load-theme 'darktooth t))

  ;; (setq default-frame-alist
  ;;   '((background-color . "#282828")
  ;; (foreground-color . "#EEEEEE")))

  ;; (set-face-foreground 'mode-line "#EEEEEE")
  ;; (set-face-background 'mode-line "#111111")
  ;; (set-face-background 'mode-line-inactive "#444444")

  ;; Emacs font
  (add-to-list 'default-frame-alist
               '(font . "Hack-8"))
#+END_SRC
* PROGRAMMING
** Lisp
#+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure t
  :commands (slime slime-lisp-mode-hook)
  :config
  (setq inferior-lisp-program "sbcl" slime-contribs '(slime-fancy)))
#+END_SRC
* SPELLING AND GRAMMAR
** Flycheck and flyspell
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :defer 2
  :diminish flycheck-mode " âœ“"
  :commands global-flycheck-mode
  :config
  (progn
    (global-flycheck-mode 1)
    (setq-default flycheck-disabled-checkers
                  '(html-tidy
                    emacs-lisp-checkdoc))))

(use-package flyspell
  :defer 2
  :init
  :config
  (progn
    (setq ispell-program-name "aspell")
    (add-hook 'text-mode-hook 'flyspell-mode)))
#+END_SRC
** Trailing whitespace
Remove trailing whitespace
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
* ORG MODE
** Don't use org builtin package, use repository one instead
#+BEGIN_SRC emacs-lisp
(assq-delete-all 'org package--builtins)
#+END_SRC
** ox-hugo
Hugo support in org-mode
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo :ensure t :after ox)
#+END_SRC
** org-mode better html export support
#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t)
#+END_SRC
* MORE PACKAGES
** Projectile - is it any good?
Make it easier to jump to files in a project.
Your emacs version has to be 25.1 or higher if you want to use this package.
#+BEGIN_SRC emacs-lisp
  ;; (use-package projectile
  ;;   :ensure t
  ;;   :bind ("C-c p" . projectile-keymap-prefix)
  ;;   :config
  ;;   (projectile-mode 1))
    ;; (setq projectile-completion-system 'ivy))
#+END_SRC
** IRC - ERC
Use the erc-tls command to launch ERC
erc-tls uses SSL, erc doesn't.

TODO: add ZNC.
#+BEGIN_SRC emacs-lisp
(defalias 'erc 'erc-tls)
(use-package erc
  :defer t
  :config
  ;; load my sensitve nickserv passwords
  (load-if-exists "~/.erc-secrets.el")

  (setq
   ;; server to use if none is provided
   erc-server "irc.serverchan.club"
   ;; server which you can choose from in the menu
   erc-server-history-list
   '("irc.serverchan.club" "irc.lainchan.org" "irc.freenode.net")
   ;; port to use if none is provided
   erc-port 6697
   ;; nickname to use if none is provided
   erc-nick "rmw"
   ;; full-name to use if none is provided
   ;; (my name is stored in the user-full-name variable)
   erc-user-full-name user-full-name
   ;; nickserv-passwords.
   ;; (I do this in my secret file)
   ;; (setq erc-nickserv-passwords
   ;;				'((freenode			(("nick-one" . "password")
   ;;												 ("nick-two" . "password")))
   ;;					(lainchan			(("nickname" . "password")))))
   ;; away nickname to use
   erc-away-nickname "rmw-away"
   ;; erc channels to autojoin
   erc-autojoin-channels-alist
   '(("serverchan.club" "#scoots")
     ("lainchan.org" "#lainchan")
     ("freenode.net" "#librelounge"))))

;; SSL support
(require 'tls)
(setq
 tls-program
 '("openssl s_client -connect %h:%p -no_ssl2 -ign_eof
																		-CAfile /home/ootput/.private/certs/CAs.pem
																		-cert /home/ootput/.private/certs/nick.pem"
   "gnutls-cli --priority secure256
							 --x509cafile /home/ootput/.private/certs/CAs.pem
							 --x509certfile /home/ootput/.private/certs/nick.pem -p %p %h"
   "gnutls-cli --priority secure256 -p %p %h"))
#+END_SRC
